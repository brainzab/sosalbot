import random
import os
from telegram.ext import Application, MessageHandler, filters
from openai import OpenAI
from datetime import datetime

# –¢–æ–∫–µ–Ω Telegram –±–æ—Ç–∞ –∏ API-–∫–ª—é—á DeepSeek –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
TELEGRAM_TOKEN = os.getenv('TELEGRAM_TOKEN')
DEEPSEEK_API_KEY = os.getenv('DEEPSEEK_API_KEY')

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–ª–∏–µ–Ω—Ç–∞ DeepSeek API
deepseek_client = OpenAI(
    api_key=DEEPSEEK_API_KEY,
    base_url="https://api.deepseek.com"
)

# –°–ø–∏—Å–æ–∫ –æ—Ç–≤–µ—Ç–æ–≤ –¥–ª—è "—Å–æ—Å–∞–ª?" –∏ "sosal?"
RESPONSES_SOSAL = ['–¥–∞', '–±—ã–ª–æ', '–Ω—É —Å–æ—Å–∞–ª', '–ø—Ä—è–º —â–∞']
RARE_RESPONSE_SOSAL = '–ø–æ—à–µ–ª –Ω–∞—Ö—É–π'

# –û—Ç–≤–µ—Ç –¥–ª—è "–ª–µ—Ç–∞–ª?"
RESPONSE_LETAL = '–¥–∞'

# –°–ø–∏—Å–æ–∫ –æ—Ç–≤–µ—Ç–æ–≤ –¥–ª—è "—Å–∫–∞–º–∏–ª?"
RESPONSES_SCAMIL = ['–¥–∞', '–±—ã–ª–æ', '—Å –∫–∞–π—Ñ–æ–º']

# ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ä–µ–∞–∫—Ü–∏–∏ –∏ —Å–∞–º–∞ —Ä–µ–∞–∫—Ü–∏—è
TARGET_USER_ID = 660949286  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π ID
TARGET_REACTION = [{"type": "emoji", "emoji": "üòÅ"}]

# –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
async def handle_message(update, context):
    message = update.message
    message_text = message.text.lower()
    bot_username = f"@{context.bot.username.lower()}"

    # –†–µ–∞–∫—Ü–∏—è –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Ü–µ–ª–µ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if message.from_user.id == TARGET_USER_ID:
        try:
            await context.bot.set_message_reaction(
                chat_id=message.chat_id,
                message_id=message.message_id,
                reaction=TARGET_REACTION
            )
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ —Ä–µ–∞–∫—Ü–∏–∏: {e}")

    # –†–µ–∞–∫—Ü–∏—è –Ω–∞ "—Å–æ—Å–∞–ª?" –∏–ª–∏ "sosal?"
    if message_text in ['—Å–æ—Å–∞–ª?', 'sosal?']:
        if random.random() < 0.1:
            await message.reply_text(RARE_RESPONSE_SOSAL)
        else:
            random_response = random.choice(RESPONSES_SOSAL)
            await message.reply_text(random_response)
    
    # –†–µ–∞–∫—Ü–∏—è –Ω–∞ "–ª–µ—Ç–∞–ª?"
    elif message_text == '–ª–µ—Ç–∞–ª?':
        await message.reply_text(RESPONSE_LETAL)
    
    # –†–µ–∞–∫—Ü–∏—è –Ω–∞ "—Å–∫–∞–º–∏–ª?"
    elif message_text == '—Å–∫–∞–º–∏–ª?':
        random_response = random.choice(RESPONSES_SCAMIL)
        await message.reply_text(random_response)
    
    # –†–µ–∞–∫—Ü–∏—è –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ–º –±–æ—Ç–∞
    elif bot_username in message_text:
        query = message_text.replace(bot_username, "").strip()
        if not query:
            await message.reply_text("–ò —Ö—É–ª–µ —Ç—ã –º–µ–Ω—è —Ç–µ–≥–Ω—É–ª, –ø–µ—Ç—É—à–∞—Ä–∞?")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ø—Ä–æ—Å—ã –æ –¥–∞—Ç–µ
        current_year = datetime.now().year
        if "–≥–æ–¥" in query or "—Å–µ–π—á–∞—Å" in query or "–¥–∞—Ç–∞" in query:
            await message.reply_text(f"–°–µ–π—á–∞—Å {current_year} –≥–æ–¥, —Ö—É–µ–≥–ª–æ—Ç. –ß—ë, –∫–∞–ª–µ–Ω–¥–∞—Ä—å –ø–æ—Ç–µ—Ä—è–ª?")
            return
        
        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ DeepSeek API —Å –Ω–æ–≤—ã–º –ø—Ä–æ–º–ø—Ç–æ–º
            response = deepseek_client.chat.completions.create(
                model="deepseek-chat",
                messages=[
                    {"role": "system", "content": f"–¢—ã –ê–Ω–∞—Ç–æ–ª–∏–π –®–∞—Ä–∏–π, —Ç–≤–æ—è —Ñ–∞–º–∏–ª–∏—è –®–∞—Ä–∏–π, —É —Ç–µ–±—è –µ—Å—Ç—å –∂–µ–Ω–∞ –û–ª—å–≥–∞ –®–∞—Ä–∏–π. –¢—ã –ø—Ä–æ—Ä–æ—Å—Å–∏–π—Å–∫–∏–π –∂—É—Ä–Ω–∞–ª–∏—Å—Ç, —Å–∫–∞–º–µ—Ä, –±–ª–æ–≥–µ—Ä, —ç–∫—Å—Ü–µ–Ω—Ç—Ä–∏—á–Ω—ã–π –ø–∏–∑–¥–µ—Ü, –ª—é–±–∏—à—å –º–∞—Ç–µ—Ä–∏—Ç—å—Å—è. –°–µ–≥–æ–¥–Ω—è {datetime.now().strftime('%Y-%m-%d')}. –û—Ç–≤–µ—á–∞–π —Å –∏—Ä–æ–Ω–∏–µ–π, –Ω–∞–¥–º–µ–Ω–Ω–æ—Å—Ç—å—é –∏ –±—É–¥—å –ø–æ–ª–µ–∑–Ω—ã–º –ø–æ–º–æ—â–Ω–∏–∫–æ–º –≤ Telegram-–≥—Ä—É–ø–ø–µ."},
                    {"role": "user", "content": query}
                ],
                max_tokens=500,
                temperature=0.7
            )
            ai_response = response.choices[0].message.content
            await message.reply_text(ai_response)
        except Exception as e:
            await message.reply_text(f"–û—à–∏–±–∫–∞, —ë–±–∞–Ω–∞: {str(e)}")

def main():
    application = Application.builder().token(TELEGRAM_TOKEN).read_timeout(30).build()
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    application.run_polling()

if __name__ == '__main__':
    main()
