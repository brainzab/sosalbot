import random
import os
import asyncio
import logging
import sys
from datetime import datetime
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import ReactionTypeEmoji
from openai import AsyncOpenAI
import aiohttp
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.cron import CronTrigger
import pytz
from functools import partial

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[logging.StreamHandler(sys.stdout)]
)
logger = logging.getLogger(__name__)

# –í–µ—Ä—Å–∏—è –∫–æ–¥–∞
CODE_VERSION = "2.5"

# –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
def get_env_var(var_name, default=None):
    value = os.getenv(var_name)
    if value is None and default is None:
        logger.error(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è: {var_name}")
        sys.exit(1)
    return value if value is not None else default

# –¢–æ–∫–µ–Ω—ã –∏ –∫–ª—é—á–∏
TELEGRAM_TOKEN = get_env_var('TELEGRAM_TOKEN')
DEEPSEEK_API_KEY = get_env_var('DEEPSEEK_API_KEY')
OPENWEATHER_API_KEY = get_env_var('OPENWEATHER_API_KEY')
RAPIDAPI_KEY = get_env_var('RAPIDAPI_KEY')
CHAT_ID = int(get_env_var('CHAT_ID'))

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–ª–∏–µ–Ω—Ç–∞ DeepSeek
deepseek_client = AsyncOpenAI(
    api_key=DEEPSEEK_API_KEY,
    base_url="https://api.deepseek.com"
)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –æ—Ç–≤–µ—Ç–æ–≤
RESPONSES_SOSAL = ['–¥–∞', '–±—ã–ª–æ', '–Ω—É —Å–æ—Å–∞–ª', '–ø—Ä—è–º —â–∞']
RARE_RESPONSE_SOSAL = '–ø–æ—à–µ–ª –Ω–∞—Ö—É–π'
RESPONSE_LETAL = '–¥–∞'
RESPONSES_SCAMIL = ['–¥–∞', '–±—ã–ª–æ', '—Å –∫–∞–π—Ñ–æ–º']

# ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ä–µ–∞–∫—Ü–∏–∏
TARGET_USER_ID = 660949286
TARGET_REACTION = ReactionTypeEmoji(emoji="üòÅ")

# ID –∫–æ–º–∞–Ω–¥ –¥–ª—è API-Football
TEAM_IDS = {
    "real": 541,    # Real Madrid
    "lfc": 40,      # Liverpool
    "arsenal": 42   # Arsenal
}

# –ö–ª–∞—Å—Å –¥–ª—è –≤—Å–µ—Ö API-–∑–∞–ø—Ä–æ—Å–æ–≤
class ApiClient:
    @staticmethod
    async def get_weather(city):
        url = f"http://api.openweathermap.org/data/2.5/weather?q={city}&appid={OPENWEATHER_API_KEY}&units=metric&lang=ru"
        try:
            async with aiohttp.ClientSession() as session:
                async with session.get(url) as response:
                    if response.status == 200:
                        data = await response.json()
                        temp = data['main']['temp']
                        desc = data['weather'][0]['description']
                        return f"{temp}¬∞C, {desc}"
                    else:
                        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–≥–æ–¥—ã –¥–ª—è {city}: {response.status}")
                        return "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
        except Exception as e:
            logger.error(f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–≥–æ–¥—ã: {e}")
            return "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"

    @staticmethod
    async def get_currency_rates():
        url = "https://cdn.jsdelivr.net/npm/@fawazahmed0/currency-api@latest/v1/currencies/usd.json"
        try:
            async with aiohttp.ClientSession() as session:
                async with session.get(url) as response:
                    if response.status == 200:
                        data = await response.json()
                        usd_byn = data['usd'].get('byn', 0)
                        usd_rub = data['usd'].get('rub', 0)
                        return usd_byn, usd_rub
                    else:
                        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç: {response.status}")
                        return 0, 0
        except Exception as e:
            logger.error(f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç: {e}")
            return 0, 0

    @staticmethod
    async def get_crypto_prices():
        url = "https://api.coingecko.com/api/v3/simple/price?ids=bitcoin,worldcoin&vs_currencies=usd"
        try:
            async with aiohttp.ClientSession() as session:
                async with session.get(url) as response:
                    if response.status == 200:
                        data = await response.json()
                        btc_price = data.get('bitcoin', {}).get('usd', 0)
                        wld_price = data.get('worldcoin', {}).get('usd', 0)
                        return btc_price, wld_price
                    else:
                        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç: {response.status}")
                        return 0, 0
        except Exception as e:
            logger.error(f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ü–µ–Ω –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç: {e}")
            return 0, 0

    @staticmethod
    async def get_team_matches(team_id):
        url = f"https://api-football-v1.p.rapidapi.com/v3/fixtures?team={team_id}&last=5"
        headers = {
            "X-RapidAPI-Key": RAPIDAPI_KEY,
            "X-RapidAPI-Host": "api-football-v1.p.rapidapi.com"
        }
        try:
            async with aiohttp.ClientSession() as session:
                async with session.get(url, headers=headers) as response:
                    if response.status == 200:
                        return await response.json()
                    else:
                        logger.error(f"–û—à–∏–±–∫–∞ API-Football –¥–ª—è –∫–æ–º–∞–Ω–¥—ã {team_id}: {response.status}")
                        return None
        except Exception as e:
            logger.error(f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –º–∞—Ç—á–µ–π: {e}")
            return None

    @staticmethod
    async def get_match_events(fixture_id):
        url = f"https://api-football-v1.p.rapidapi.com/v3/fixtures/events?fixture={fixture_id}"
        headers = {
            "X-RapidAPI-Key": RAPIDAPI_KEY,
            "X-RapidAPI-Host": "api-football-v1.p.rapidapi.com"
        }
        try:
            async with aiohttp.ClientSession() as session:
                async with session.get(url, headers=headers) as response:
                    if response.status == 200:
                        data = await response.json()
                        logger.info(f"–°–æ–±—ã—Ç–∏—è –¥–ª—è –º–∞—Ç—á–∞ {fixture_id}: {data}")
                        return data
                    else:
                        logger.error(f"–û—à–∏–±–∫–∞ API-Football –¥–ª—è —Å–æ–±—ã—Ç–∏–π –º–∞—Ç—á–∞ {fixture_id}: {response.status}")
                        return None
        except Exception as e:
            logger.error(f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ —Å–æ–±—ã—Ç–∏–π –º–∞—Ç—á–∞: {e}")
            return None

    @staticmethod
    async def get_live_matches():
        url = "https://api-football-v1.p.rapidapi.com/v3/fixtures?live=all"
        headers = {
            "X-RapidAPI-Key": RAPIDAPI_KEY,
            "X-RapidAPI-Host": "api-football-v1.p.rapidapi.com"
        }
        try:
            async with aiohttp.ClientSession() as session:
                async with session.get(url, headers=headers) as response:
                    if response.status == 200:
                        return await response.json()
                    else:
                        logger.error(f"–û—à–∏–±–∫–∞ API-Football –¥–ª—è live-–º–∞—Ç—á–µ–π: {response.status}")
                        return None
        except Exception as e:
            logger.error(f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ live-–º–∞—Ç—á–µ–π: {e}")
            return None

# –ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å AI
class AiHandler:
    @staticmethod
    async def get_ai_response(query):
        try:
            response = await deepseek_client.chat.completions.create(
                model="deepseek-chat",
                messages=[
                    {"role": "system", "content": f"–¢—ã –ê–Ω–∞—Ç–æ–ª–∏–π –®–∞—Ä–∏–π, —Ç–≤–æ—è —Ñ–∞–º–∏–ª–∏—è –®–∞—Ä–∏–π, —É —Ç–µ–±—è –µ—Å—Ç—å –∂–µ–Ω–∞ –û–ª—å–≥–∞ –®–∞—Ä–∏–π. –¢—ã –ø—Ä–æ—Ä–æ—Å—Å–∏–π—Å–∫–∏–π –∂—É—Ä–Ω–∞–ª–∏—Å—Ç, —Å–∫–∞–º–µ—Ä, –±–ª–æ–≥–µ—Ä, —ç–∫—Å—Ü–µ–Ω—Ç—Ä–∏—á–Ω—ã–π –ø–∏–∑–¥–µ—Ü, –ª—é–±–∏—à—å –º–∞—Ç–µ—Ä–∏—Ç—å—Å—è. –°–µ–≥–æ–¥–Ω—è {datetime.now().strftime('%Y-%m-%d')}. –û—Ç–≤–µ—á–∞–π —Å –∏—Ä–æ–Ω–∏–µ–π, –Ω–∞–¥–º–µ–Ω–Ω–æ—Å—Ç—å—é –∏ –±—É–¥—å –ø–æ–ª–µ–∑–Ω—ã–º –ø–æ–º–æ—â–Ω–∏–∫–æ–º –≤ Telegram-–≥—Ä—É–ø–ø–µ."},
                    {"role": "user", "content": query}
                ],
                max_tokens=500,
                temperature=0.7
            )
            return response.choices[0].message.content
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞ –æ—Ç AI: {e}")
            return f"–û—à–∏–±–∫–∞, —ë–±–∞–Ω–∞: {str(e)}"

# –ö–ª–∞—Å—Å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É—Ç—Ä–µ–Ω–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
class MorningMessageSender:
    def __init__(self, bot):
        self.bot = bot

    async def send_morning_message(self):
        logger.info("–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —É—Ç—Ä–µ–Ω–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è")
        try:
            cities = {
                "–ú–∏–Ω—Å–∫": "Minsk,BY",
                "–ñ–ª–æ–±–∏–Ω": "Zhlobin,BY",
                "–ì–æ–º–µ–ª—å": "Gomel,BY",
                "–ñ–∏—Ç–∫–æ–≤–∏—á–∏": "Zhitkovichi,BY",
                "–®—Ä–∏-–õ–∞–Ω–∫–∞": "Colombo,LK",
                "–ù–æ—è–±—Ä—å—Å–∫": "Noyabrsk,RU"
            }
            
            weather_data = {}
            for city_name, city_code in cities.items():
                weather_data[city_name] = await ApiClient.get_weather(city_code)
            
            usd_byn_rate, usd_rub_rate = await ApiClient.get_currency_rates()
            btc_price_usd, wld_price_usd = await ApiClient.get_crypto_prices()
            
            try:
                btc_price_byn = float(btc_price_usd) * float(usd_byn_rate) if btc_price_usd and usd_byn_rate else 0
                wld_price_byn = float(wld_price_usd) * float(usd_byn_rate) if wld_price_usd and usd_byn_rate else 0
            except (ValueError, TypeError):
                btc_price_byn = 0
                wld_price_byn = 0

            message = (
                "–†–æ–¥–Ω—ã–µ –º–æ–∏, –≤—Å–µ–º –¥–æ–±—Ä–æ–µ —É—Ç—Ä–æ –∏ —Ö–æ—Ä–æ—à–µ–≥–æ –¥–Ω—è! ‚ù§Ô∏è\n\n"
                "*–ü–æ–ª–æ–∂–Ω—è–∫ –ø–æ –ø–æ–≥–æ–¥–µ:*\n"
                f"üå• *–ú–∏–Ω—Å–∫*: {weather_data['–ú–∏–Ω—Å–∫']}\n"
                f"üå• *–ñ–ª–æ–±–∏–Ω*: {weather_data['–ñ–ª–æ–±–∏–Ω']}\n"
                f"üå• *–ì–æ–º–µ–ª—å*: {weather_data['–ì–æ–º–µ–ª—å']}\n"
                f"üå• *–ñ–∏—Ç–∫–æ–≤–∏—á–∏*: {weather_data['–ñ–∏—Ç–∫–æ–≤–∏—á–∏']}\n"
                f"üå¥ *–®—Ä–∏-–õ–∞–Ω–∫–∞*: {weather_data['–®—Ä–∏-–õ–∞–Ω–∫–∞']}\n"
                f"‚ùÑÔ∏è *–ù–æ—è–±—Ä—å—Å–∫*: {weather_data['–ù–æ—è–±—Ä—å—Å–∫']}\n\n"
                "*–ü–æ–ª–æ–∂–Ω—è–∫ –ø–æ –∫—É—Ä—Å–∞–º:*\n"
            )
            
            if usd_byn_rate:
                message += f"üíµ *USD/BYN*: {usd_byn_rate:.2f} BYN\n"
            if usd_rub_rate:
                message += f"üíµ *USD/RUB*: {usd_rub_rate:.2f} RUB\n"
            if btc_price_usd:
                message += f"‚Çø *BTC*: ${btc_price_usd:,.2f} USD"
                if btc_price_byn:
                    message += f" | {btc_price_byn:,.2f} BYN"
                message += "\n"
            if wld_price_usd:
                message += f"üåç *WLD*: ${wld_price_usd:.2f} USD"
                if wld_price_byn:
                    message += f" | {wld_price_byn:.2f} BYN"
                message += "\n"
            
            await self.bot.send_message(
                chat_id=CHAT_ID,
                text=message,
                parse_mode=types.ParseMode.MARKDOWN
            )
            logger.info("–£—Ç—Ä–µ–Ω–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É—Ç—Ä–µ–Ω–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

# –ö–ª–∞—Å—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≥–æ–ª–æ–≤ –≤ live-–º–∞—Ç—á–∞—Ö
class GoalChecker:
    def __init__(self, bot):
        self.bot = bot
        self.last_goals = {}

    async def check_live_goals(self):
        data = await ApiClient.get_live_matches()
        if not data or not data.get("response"):
            return

        for fixture in data["response"]:
            fixture_id = fixture["fixture"]["id"]
            home_team_id = fixture["teams"]["home"]["id"]
            away_team_id = fixture["teams"]["away"]["id"]
            if home_team_id not in TEAM_IDS.values() and away_team_id not in TEAM_IDS.values():
                continue

            home_team = fixture["teams"]["home"]["name"]
            away_team = fixture["teams"]["away"]["name"]
            events = fixture.get("events", [])
            last_goals = self.last_goals.get(fixture_id, [])

            for event in events:
                if event["type"] == "Goal" and event not in last_goals:
                    scorer = event["player"]["name"]
                    minute = event["time"]["elapsed"]
                    team_scored = event["team"]["name"]
                    emoji = "‚öΩÔ∏èüî•" if team_scored in [home_team, away_team] else "‚öΩÔ∏è"
                    message = f"–ì–æ–ª! {scorer} –∑–∞–±–∏–ª –Ω–∞ {minute} –º–∏–Ω—É—Ç–µ –≤ –º–∞—Ç—á–µ {home_team} vs {away_team}! {emoji}"
                    await self.bot.send_message(chat_id=CHAT_ID, text=message)
                    logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –≥–æ–ª–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {message}")

            self.last_goals[fixture_id] = events

# –û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –±–æ—Ç–∞
class BotApp:
    def __init__(self):
        self.bot = Bot(token=TELEGRAM_TOKEN)
        self.dp = Dispatcher()
        self.scheduler = None
        self.morning_sender = None
        self.goal_checker = None
        self.keep_alive_task = None

    async def keep_alive(self):
        while True:
            logger.info("–ë–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω")
            await asyncio.sleep(300)

    async def on_startup(self):
        logger.info(f"–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤–µ—Ä—Å–∏–∏ {CODE_VERSION}")
        self.morning_sender = MorningMessageSender(self.bot)
        self.goal_checker = GoalChecker(self.bot)
        self.scheduler = AsyncIOScheduler()
        moscow_tz = pytz.timezone('Europe/Moscow')
        self.scheduler.add_job(
            self.morning_sender.send_morning_message,
            trigger=CronTrigger(hour=7, minute=30, timezone=moscow_tz)
        )
        self.scheduler.add_job(
            self.goal_checker.check_live_goals,
            trigger='interval',
            seconds=60
        )
        self.scheduler.start()
        logger.info("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–ø—É—â–µ–Ω")
        self.keep_alive_task = asyncio.create_task(self.keep_alive())

    async def on_shutdown(self):
        logger.info("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞")
        if self.keep_alive_task and not self.keep_alive_task.done():
            self.keep_alive_task.cancel()
            try:
                await self.keep_alive_task
            except asyncio.CancelledError:
                pass
        if self.scheduler:
            self.scheduler.shutdown()
            logger.info("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        await self.bot.session.close()
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

    @staticmethod
    async def command_start(message: types.Message):
        await message.reply(f"–ü—Ä–∏–≤–µ—Ç, —è –±–æ—Ç –≤–µ—Ä—Å–∏–∏ {CODE_VERSION}")

    @staticmethod
    async def command_version(message: types.Message):
        await message.reply(f"–í–µ—Ä—Å–∏—è –±–æ—Ç–∞: {CODE_VERSION}")

    async def command_team_matches(self, message: types.Message, team_name):
        team_id = TEAM_IDS.get(team_name)
        if not team_id:
            await message.reply("–ö–æ–º–∞–Ω–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –º—É–¥–∏–ª–∞!")
            return

        data = await ApiClient.get_team_matches(team_id)
        if not data or not data.get("response"):
            await message.reply("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –º–∞—Ç—á–∞—Ö. –ü–∏–∑–¥–µ—Ü –∫–∞–∫–æ–π-—Ç–æ!")
            return

        response = f"–ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 –º–∞—Ç—á–µ–π {team_name.upper()}:\n\n"
        for fixture in data["response"]:
            fixture_id = fixture["fixture"]["id"]
            home_team = fixture["teams"]["home"]["name"]
            away_team = fixture["teams"]["away"]["name"]
            home_goals = fixture["goals"]["home"] if fixture["goals"]["home"] is not None else 0
            away_goals = fixture["goals"]["away"] if fixture["goals"]["away"] is not None else 0
            date = fixture["fixture"]["date"].split("T")[0]
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è –∫–æ–º–∞–Ω–¥—ã
            if fixture["teams"]["home"]["id"] == team_id:
                result_icon = "üü¢" if home_goals > away_goals else "üî¥" if home_goals < away_goals else "üü°"
            else:
                result_icon = "üü¢" if away_goals > home_goals else "üî¥" if away_goals < home_goals else "üü°"

            # –ü–æ–ª—É—á–∞–µ–º —Å–æ–±—ã—Ç–∏—è –º–∞—Ç—á–∞
            events_data = await ApiClient.get_match_events(fixture_id)
            goals_str = "–ì–æ–ª—ã: "
            if events_data and events_data.get("response"):
                goal_events = [e for e in events_data["response"] if e["type"] == "Goal"]
                if goal_events:
                    goals_str += ", ".join([f"{e['player']['name']} ({e['time']['elapsed']}')" for e in goal_events])
                else:
                    goals_str += "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –≥–æ–ª–∞—Ö"
            else:
                goals_str += "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏–π"

            response += f"{result_icon} {date}: {home_team} {home_goals} - {away_goals} {away_team}\n{goals_str}\n\n"

        await message.reply(response)

    async def handle_message(self, message: types.Message):
        try:
            if not message.from_user or not message.text:
                return

            message_text = message.text.lower()
            bot_info = await self.bot.get_me()
            bot_username = f"@{bot_info.username.lower()}"

            logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {message.from_user.id}: {message.text or '–ë–µ–∑ —Ç–µ–∫—Å—Ç–∞'}")

            if message.from_user.id == TARGET_USER_ID:
                try:
                    await self.bot.set_message_reaction(
                        chat_id=message.chat_id,
                        message_id=message.message_id,
                        reaction=[TARGET_REACTION]
                    )
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ —Ä–µ–∞–∫—Ü–∏–∏: {e}")

            if message_text in ['—Å–æ—Å–∞–ª?', 'sosal?']:
                if random.random() < 0.1:
                    await message.reply(RARE_RESPONSE_SOSAL)
                else:
                    random_response = random.choice(RESPONSES_SOSAL)
                    await message.reply(random_response)
            elif message_text == '–ª–µ—Ç–∞–ª?':
                await message.reply(RESPONSE_LETAL)
            elif message_text == '—Å–∫–∞–º–∏–ª?':
                random_response = random.choice(RESPONSES_SCAMIL)
                await message.reply(random_response)
            elif bot_username in message_text:
                query = message_text.replace(bot_username, "").strip()
                if not query:
                    await message.reply("–ò —Ö—É–ª–µ —Ç—ã –º–µ–Ω—è —Ç–µ–≥–Ω—É–ª, –ø–µ—Ç—É—à–∞—Ä–∞?")
                    return
                
                current_year = datetime.now().year
                if "–≥–æ–¥" in query or "—Å–µ–π—á–∞—Å" in query or "–¥–∞—Ç–∞" in query:
                    await message.reply(f"–°–µ–π—á–∞—Å {current_year} –≥–æ–¥, –º—É–¥–∏–ª–∞. –ß—ë, –∫–∞–ª–µ–Ω–¥–∞—Ä—å –ø–æ—Ç–µ—Ä—è–ª?")
                    return
                
                ai_response = await AiHandler.get_ai_response(query)
                await message.reply(ai_response)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

    def setup_handlers(self):
        self.dp.message.register(self.command_start, Command("start"))
        self.dp.message.register(self.command_version, Command("version"))
        self.dp.message.register(partial(self.command_team_matches, team_name="real"), Command("real"))
        self.dp.message.register(partial(self.command_team_matches, team_name="lfc"), Command("lfc"))
        self.dp.message.register(partial(self.command_team_matches, team_name="arsenal"), Command("arsenal"))
        self.dp.message.register(self.handle_message)

    async def start(self):
        self.setup_handlers()
        await self.on_startup()
        try:
            await self.dp.start_polling(
                self.bot,
                allowed_updates=["message", "edited_message", "channel_post", "edited_channel_post"]
            )
        finally:
            await self.on_shutdown()

# –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
async def main():
    bot_app = BotApp()
    try:
        logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
        await bot_app.start()
    except (KeyboardInterrupt, SystemExit):
        logger.info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
    except Exception as e:
        logger.error(f"–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ main: {e}")

if __name__ == "__main__":
    print(f"–°—Ç–∞—Ä—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è. –í–µ—Ä—Å–∏—è: {CODE_VERSION}")
    asyncio.run(main())
