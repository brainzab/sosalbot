import random
import os
import asyncio
from telegram.ext import Application, MessageHandler, filters
from openai import OpenAI
from datetime import datetime
import logging
import aiohttp
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.cron import CronTrigger
import pytz

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –¢–æ–∫–µ–Ω Telegram –±–æ—Ç–∞ –∏ API-–∫–ª—é—á–∏ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
TELEGRAM_TOKEN = os.getenv('TELEGRAM_TOKEN')
DEEPSEEK_API_KEY = os.getenv('DEEPSEEK_API_KEY')
OPENWEATHER_API_KEY = os.getenv('OPENWEATHER_API_KEY')
CHAT_ID = os.getenv('CHAT_ID')

# –í–µ—Ä—Å–∏—è –∫–æ–¥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
CODE_VERSION = "1.4"

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–ª–∏–µ–Ω—Ç–∞ DeepSeek API
deepseek_client = OpenAI(
    api_key=DEEPSEEK_API_KEY,
    base_url="https://api.deepseek.com"
)

# –°–ø–∏—Å–æ–∫ –æ—Ç–≤–µ—Ç–æ–≤ –¥–ª—è "—Å–æ—Å–∞–ª?" –∏ "sosal?"
RESPONSES_SOSAL = ['–¥–∞', '–±—ã–ª–æ', '–Ω—É —Å–æ—Å–∞–ª', '–ø—Ä—è–º —â–∞']
RARE_RESPONSE_SOSAL = '–ø–æ—à–µ–ª –Ω–∞—Ö—É–π'

# –û—Ç–≤–µ—Ç –¥–ª—è "–ª–µ—Ç–∞–ª?"
RESPONSE_LETAL = '–¥–∞'

# –°–ø–∏—Å–æ–∫ –æ—Ç–≤–µ—Ç–æ–≤ –¥–ª—è "—Å–∫–∞–º–∏–ª?"
RESPONSES_SCAMIL = ['–¥–∞', '–±—ã–ª–æ', '—Å –∫–∞–π—Ñ–æ–º']

# ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ä–µ–∞–∫—Ü–∏–∏ –∏ —Å–∞–º–∞ —Ä–µ–∞–∫—Ü–∏—è
TARGET_USER_ID = 660949286
TARGET_REACTION = [{"type": "emoji", "emoji": "üòÅ"}]

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–≥–æ–¥—ã
async def get_weather(city):
    url = f"http://api.openweathermap.org/data/2.5/weather?q={city}&appid={OPENWEATHER_API_KEY}&units=metric&lang=ru"
    async with aiohttp.ClientSession() as session:
        async with session.get(url) as response:
            if response.status == 200:
                data = await response.json()
                temp = data['main']['temp']
                desc = data['weather'][0]['description']
                return f"{temp}¬∞C, {desc}"
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–≥–æ–¥—ã –¥–ª—è {city}: {response.status}")
            return "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–æ–≤ USD/BYN –∏ USD/RUB —Å CurrencyAPI
async def get_currency_rates():
    url = "https://cdn.jsdelivr.net/npm/@fawazahmed0/currency-api@latest/v1/currencies/usd.json"
    async with aiohttp.ClientSession() as session:
        async with session.get(url) as response:
            if response.status == 200:
                data = await response.json()
                usd_byn = data['usd']['byn']
                usd_rub = data['usd']['rub']
                return usd_byn, usd_rub
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç: {response.status}")
            return "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö", "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω BTC –∏ WLD
async def get_crypto_prices():
    url = "https://api.coingecko.com/api/v3/simple/price?ids=bitcoin,worldcoin&vs_currencies=usd"
    async with aiohttp.ClientSession() as session:
        async with session.get(url) as response:
            if response.status == 200:
                data = await response.json()
                btc_price = data['bitcoin']['usd']
                wld_price = data['worldcoin']['usd']
                return btc_price, wld_price
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç: {response.status}")
            return "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö", "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É—Ç—Ä–µ–Ω–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
async def send_morning_message(application):
    logger.info("–û—Ç–ø—Ä–∞–≤–∫–∞ —É—Ç—Ä–µ–Ω–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è")
    cities = {
        "–ú–∏–Ω—Å–∫": "Minsk,BY",
        "–ñ–ª–æ–±–∏–Ω": "Zhlobin,BY",
        "–ì–æ–º–µ–ª—å": "Gomel,BY",
        "–ñ–∏—Ç–∫–æ–≤–∏—á–∏": "Zhitkovichi,BY",
        "–®—Ä–∏-–õ–∞–Ω–∫–∞": "Colombo,LK",
        "–ù–æ—è–±—Ä—å—Å–∫": "Noyabrsk,RU"
    }
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    weather_data = {}
    for city_name, city_code in cities.items():
        weather_data[city_name] = await get_weather(city_code)
    
    usd_byn_rate, usd_rub_rate = await get_currency_rates()
    btc_price_usd, wld_price_usd = await get_crypto_prices()
    
    btc_price_byn = btc_price_usd * usd_byn_rate if isinstance(btc_price_usd, float) and isinstance(usd_byn_rate, float) else "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
    wld_price_byn = wld_price_usd * usd_byn_rate if isinstance(wld_price_usd, float) and isinstance(usd_byn_rate, float) else "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–∞–∑–º–µ—Ç–∫–æ–π
    message = (
        "–†–æ–¥–Ω—ã–µ –º–æ–∏, –≤—Å–µ–º –¥–æ–±—Ä–æ–µ —É—Ç—Ä–æ –∏ —Ö–æ—Ä–æ—à–µ–≥–æ –¥–Ω—è! ‚ù§Ô∏è\n\n"
        "**–ü–æ–ª–æ–∂–Ω—è–∫ –ø–æ –ø–æ–≥–æ–¥–µ:**\n"
        f"üå• *–ú–∏–Ω—Å–∫*: {weather_data['–ú–∏–Ω—Å–∫']}\n"
        f"üå• *–ñ–ª–æ–±–∏–Ω*: {weather_data['–ñ–ª–æ–±–∏–Ω']}\n"
        f"üå• *–ì–æ–º–µ–ª—å*: {weather_data['–ì–æ–º–µ–ª—å']}\n"
        f"üå• *–ñ–∏—Ç–∫–æ–≤–∏—á–∏*: {weather_data['–ñ–∏—Ç–∫–æ–≤–∏—á–∏']}\n"
        f"üå¥ *–®—Ä–∏-–õ–∞–Ω–∫–∞*: {weather_data['–®—Ä–∏-–õ–∞–Ω–∫–∞']}\n"
        f"‚ùÑÔ∏è *–ù–æ—è–±—Ä—å—Å–∫*: {weather_data['–ù–æ—è–±—Ä—å—Å–∫']}\n\n"
        "**–ü–æ–ª–æ–∂–Ω—è–∫ –ø–æ –∫—É—Ä—Å–∞–º:**\n"
        f"üíµ *USD/BYN*: {usd_byn_rate:.2f} BYN\n"
        f"üíµ *USD/RUB*: {usd_rub_rate:.2f} RUB\n"
        f"‚Çø *BTC*: ${btc_price_usd:,.2f} USD | {btc_price_byn:,.2f} BYN\n"
        f"üåç *WLD*: ${wld_price_usd:.2f} USD | {wld_price_byn:.2f} BYN"
    )
    
    try:
        await application.bot.send_message(chat_id=CHAT_ID, text=message, parse_mode='Markdown')
        logger.info("–£—Ç—Ä–µ–Ω–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É—Ç—Ä–µ–Ω–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

# –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
async def handle_message(update, context):
    message = update.message
    message_text = message.text.lower() if message.text else ""
    bot_username = f"@{context.bot.username.lower()}"

    # –õ–æ–≥–∏—Ä—É–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {message.from_user.id}: {message.text or '–ë–µ–∑ —Ç–µ–∫—Å—Ç–∞'}")

    # –†–µ–∞–∫—Ü–∏—è –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Ü–µ–ª–µ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if message.from_user.id == TARGET_USER_ID:
        try:
            await context.bot.set_message_reaction(
                chat_id=message.chat_id,
                message_id=message.message_id,
                reaction=TARGET_REACTION
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ —Ä–µ–∞–∫—Ü–∏–∏: {e}")

    # –†–µ–∞–∫—Ü–∏—è –Ω–∞ "—Å–æ—Å–∞–ª?" –∏–ª–∏ "sosal?"
    if message_text in ['—Å–æ—Å–∞–ª?', 'sosal?']:
        if random.random() < 0.1:
            await message.reply_text(RARE_RESPONSE_SOSAL)
        else:
            random_response = random.choice(RESPONSES_SOSAL)
            await message.reply_text(random_response)
    
    # –†–µ–∞–∫—Ü–∏—è –Ω–∞ "–ª–µ—Ç–∞–ª?"
    elif message_text == '–ª–µ—Ç–∞–ª?':
        await message.reply_text(RESPONSE_LETAL)
    
    # –†–µ–∞–∫—Ü–∏—è –Ω–∞ "—Å–∫–∞–º–∏–ª?"
    elif message_text == '—Å–∫–∞–º–∏–ª?':
        random_response = random.choice(RESPONSES_SCAMIL)
        await message.reply_text(random_response)
    
    # –†–µ–∞–∫—Ü–∏—è –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ–º –±–æ—Ç–∞
    elif message_text and bot_username in message_text:
        query = message_text.replace(bot_username, "").strip()
        if not query:
            await message.reply_text("–ò —Ö—É–ª–µ —Ç—ã –º–µ–Ω—è —Ç–µ–≥–Ω—É–ª, –ø–µ—Ç—É—à–∞—Ä–∞?")
            return
        
        current_year = datetime.now().year
        if "–≥–æ–¥" in query or "—Å–µ–π—á–∞—Å" in query or "–¥–∞—Ç–∞" in query:
            await message.reply_text(f"–°–µ–π—á–∞—Å {current_year} –≥–æ–¥, –º—É–¥–∏–ª–∞. –ß—ë, –∫–∞–ª–µ–Ω–¥–∞—Ä—å –ø–æ—Ç–µ—Ä—è–ª?")
            return
        
        try:
            response = deepseek_client.chat.completions.create(
                model="deepseek-chat",
                messages=[
                    {"role": "system", "content": f"–¢—ã –ê–Ω–∞—Ç–æ–ª–∏–π –®–∞—Ä–∏–π, —Ç–≤–æ—è —Ñ–∞–º–∏–ª–∏—è –®–∞—Ä–∏–π, —É —Ç–µ–±—è –µ—Å—Ç—å –∂–µ–Ω–∞ –û–ª—å–≥–∞ –®–∞—Ä–∏–π. –¢—ã –ø—Ä–æ—Ä–æ—Å—Å–∏–π—Å–∫–∏–π –∂—É—Ä–Ω–∞–ª–∏—Å—Ç, —Å–∫–∞–º–µ—Ä, –±–ª–æ–≥–µ—Ä, —ç–∫—Å—Ü–µ–Ω—Ç—Ä–∏—á–Ω—ã–π –ø–∏–∑–¥–µ—Ü, –ª—é–±–∏—à—å –º–∞—Ç–µ—Ä–∏—Ç—å—Å—è. –°–µ–≥–æ–¥–Ω—è {datetime.now().strftime('%Y-%m-%d')}. –û—Ç–≤–µ—á–∞–π —Å –∏—Ä–æ–Ω–∏–µ–π, –Ω–∞–¥–º–µ–Ω–Ω–æ—Å—Ç—å—é –∏ –±—É–¥—å –ø–æ–ª–µ–∑–Ω—ã–º –ø–æ–º–æ—â–Ω–∏–∫–æ–º –≤ Telegram-–≥—Ä—É–ø–ø–µ."},
                    {"role": "user", "content": query}
                ],
                max_tokens=500,
                temperature=0.7
            )
            ai_response = response.choices[0].message.content
            await message.reply_text(ai_response)
        except Exception as e:
            await message.reply_text(f"–û—à–∏–±–∫–∞, —ë–±–∞–Ω–∞: {str(e)}")

async def main():
    # –õ–æ–≥–∏—Ä—É–µ–º –≤–µ—Ä—Å–∏—é –∫–æ–¥–∞
    logger.info(f"–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞, –≤–µ—Ä—Å–∏—è –∫–æ–¥–∞: {CODE_VERSION}")

    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder().token(TELEGRAM_TOKEN).read_timeout(30).build()
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    await application.initialize()
    await application.start()
    logger.info("–ë–æ—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–ø—É—â–µ–Ω")

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
    scheduler = AsyncIOScheduler()
    moscow_tz = pytz.timezone('Europe/Moscow')
    scheduler.add_job(
        send_morning_message,
        trigger=CronTrigger(hour=7, minute=30, timezone=moscow_tz),
        args=[application]
    )
    scheduler.start()
    logger.info("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–ø—É—â–µ–Ω")

    # –ó–∞–ø—É—Å–∫–∞–µ–º polling –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
    try:
        await application.run_polling()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ run_polling: {e}")
        raise  # –ü–æ–¥–Ω–∏–º–∞–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª–Ω–æ–π —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∏
    finally:
        await application.stop()
        await application.shutdown()
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

if __name__ == '__main__':
    try:
        asyncio.run(main())
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –≥–ª–∞–≤–Ω–æ–º —Ü–∏–∫–ª–µ: {e}")
