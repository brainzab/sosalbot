import random
import os
import asyncio
import logging
import sys
from datetime import datetime
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import ReactionTypeEmoji
from openai import AsyncOpenAI
import aiohttp
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.cron import CronTrigger
import pytz
from functools import partial
import asyncpg
import json

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[logging.StreamHandler(sys.stdout)]
)
logger = logging.getLogger(__name__)

# –í–µ—Ä—Å–∏—è –∫–æ–¥–∞
CODE_VERSION = "2.6"

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
MAX_TOKENS = 999
AI_TEMPERATURE = 1.5
CHAT_HISTORY_LIMIT = 30

# –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
def get_env_var(var_name, default=None):
    value = os.getenv(var_name)
    if value is None and default is None:
        logger.error(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è: {var_name}")
        sys.exit(1)
    return value if value is not None else default

# –¢–æ–∫–µ–Ω—ã –∏ –∫–ª—é—á–∏
TELEGRAM_TOKEN = get_env_var('TELEGRAM_TOKEN')
DEEPSEEK_API_KEY = get_env_var('DEEPSEEK_API_KEY')
OPENWEATHER_API_KEY = get_env_var('OPENWEATHER_API_KEY')
RAPIDAPI_KEY = get_env_var('RAPIDAPI_KEY')
CHAT_ID = int(get_env_var('CHAT_ID'))
DATABASE_URL = get_env_var('DATABASE_URL')
TARGET_USER_ID = int(get_env_var('TARGET_USER_ID', '660949286'))

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –æ—Ç–≤–µ—Ç–æ–≤ –∏–∑ .env
RESPONSES_SOSAL = json.loads(get_env_var('RESPONSES_SOSAL', '["–¥–∞", "–±—ã–ª–æ", "–Ω—É —Å–æ—Å–∞–ª", "–ø—Ä—è–º —â–∞"]'))
RARE_RESPONSE_SOSAL = get_env_var('RARE_RESPONSE_SOSAL', '–ø–æ—à–µ–ª –Ω–∞—Ö—É–π')
RESPONSE_LETAL = get_env_var('RESPONSE_LETAL', '–¥–∞')
RESPONSES_SCAMIL = json.loads(get_env_var('RESPONSES_SCAMIL', '["–¥–∞", "–±—ã–ª–æ", "—Å –∫–∞–π—Ñ–æ–º"]'))
TEAM_IDS = json.loads(get_env_var('TEAM_IDS', '{"real": 541, "lfc": 40, "arsenal": 42}'))
TARGET_REACTION = ReactionTypeEmoji(emoji=get_env_var('TARGET_REACTION', 'üòÅ'))

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–ª–∏–µ–Ω—Ç–∞ DeepSeek
deepseek_client = AsyncOpenAI(api_key=DEEPSEEK_API_KEY, base_url="https://api.deepseek.com")

# –ö–ª–∞—Å—Å –¥–ª—è –≤—Å–µ—Ö API-–∑–∞–ø—Ä–æ—Å–æ–≤
class ApiClient:
    @staticmethod
    async def get_weather(city):
        url = f"http://api.openweathermap.org/data/2.5/weather?q={city}&appid={OPENWEATHER_API_KEY}&units=metric&lang=ru"
        try:
            async with aiohttp.ClientSession() as session:
                async with session.get(url) as response:
                    if response.status == 200:
                        data = await response.json()
                        temp = data['main']['temp']
                        desc = data['weather'][0]['description']
                        return f"{temp}¬∞C, {desc}"
                    logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–≥–æ–¥—ã –¥–ª—è {city}: {response.status}")
                    return "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
        except aiohttp.ClientError as e:
            logger.error(f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–≥–æ–¥—ã: {e}")
            return "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"

    @staticmethod
    async def get_currency_rates():
        url = "https://cdn.jsdelivr.net/npm/@fawazahmed0/currency-api@latest/v1/currencies/usd.json"
        try:
            async with aiohttp.ClientSession() as session:
                async with session.get(url) as response:
                    if response.status == 200:
                        data = await response.json()
                        usd_byn = data['usd'].get('byn', 0)
                        usd_rub = data['usd'].get('rub', 0)
                        return usd_byn, usd_rub
                    logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç: {response.status}")
                    return 0, 0
        except aiohttp.ClientError as e:
            logger.error(f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç: {e}")
            return 0, 0

    @staticmethod
    async def get_crypto_prices():
        url = "https://api.coingecko.com/api/v3/simple/price?ids=bitcoin,worldcoin&vs_currencies=usd"
        try:
            async with aiohttp.ClientSession() as session:
                async with session.get(url) as response:
                    if response.status == 200:
                        data = await response.json()
                        btc_price = data.get('bitcoin', {}).get('usd', 0)
                        wld_price = data.get('worldcoin', {}).get('usd', 0)
                        return btc_price, wld_price
                    logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç: {response.status}")
                    return 0, 0
        except aiohttp.ClientError as e:
            logger.error(f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ü–µ–Ω –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç: {e}")
            return 0, 0

    @staticmethod
    async def get_team_matches(team_id):
        url = f"https://api-football-v1.p.rapidapi.com/v3/fixtures?team={team_id}&last=5"
        headers = {"X-RapidAPI-Key": RAPIDAPI_KEY, "X-RapidAPI-Host": "api-football-v1.p.rapidapi.com"}
        try:
            async with aiohttp.ClientSession() as session:
                async with session.get(url, headers=headers) as response:
                    if response.status == 200:
                        return await response.json()
                    logger.error(f"–û—à–∏–±–∫–∞ API-Football –¥–ª—è –∫–æ–º–∞–Ω–¥—ã {team_id}: {response.status}")
                    return None
        except aiohttp.ClientError as e:
            logger.error(f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –º–∞—Ç—á–µ–π: {e}")
            return None

    @staticmethod
    async def get_match_events(fixture_id):
        url = f"https://api-football-v1.p.rapidapi.com/v3/fixtures/events?fixture={fixture_id}"
        headers = {"X-RapidAPI-Key": RAPIDAPI_KEY, "X-RapidAPI-Host": "api-football-v1.p.rapidapi.com"}
        try:
            async with aiohttp.ClientSession() as session:
                async with session.get(url, headers=headers) as response:
                    if response.status == 200:
                        data = await response.json()
                        logger.info(f"–°–æ–±—ã—Ç–∏—è –¥–ª—è –º–∞—Ç—á–∞ {fixture_id}: {data}")
                        return data
                    logger.error(f"–û—à–∏–±–∫–∞ API-Football –¥–ª—è —Å–æ–±—ã—Ç–∏–π –º–∞—Ç—á–∞ {fixture_id}: {response.status}")
                    return None
        except aiohttp.ClientError as e:
            logger.error(f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ —Å–æ–±—ã—Ç–∏–π –º–∞—Ç—á–∞: {e}")
            return None

# –ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å AI
class AiHandler:
    @staticmethod
    async def get_ai_response(chat_history, query):
        try:
            messages = [
                {"role": "system", "content": f"–¢—ã –ê–Ω–∞—Ç–æ–ª–∏–π –®–∞—Ä–∏–π, —Ç–≤–æ—è —Ñ–∞–º–∏–ª–∏—è –®–∞—Ä–∏–π, —É —Ç–µ–±—è –µ—Å—Ç—å –∂–µ–Ω–∞ –û–ª—å–≥–∞ –®–∞—Ä–∏–π. –¢—ã –ø—Ä–æ—Ä–æ—Å—Å–∏–π—Å–∫–∏–π –∂—É—Ä–Ω–∞–ª–∏—Å—Ç, —Å–∫–∞–º–µ—Ä, –±–ª–æ–≥–µ—Ä, —ç–∫—Å—Ü–µ–Ω—Ç—Ä–∏—á–Ω—ã–π –ø–∏–∑–¥–µ—Ü, –ª—é–±–∏—à—å –º–∞—Ç–µ—Ä–∏—Ç—å—Å—è. –°–µ–≥–æ–¥–Ω—è {datetime.now().strftime('%Y-%m-%d')}. –û—Ç–≤–µ—á–∞–π —Å –∏—Ä–æ–Ω–∏–µ–π, –Ω–∞–¥–º–µ–Ω–Ω–æ—Å—Ç—å—é –∏ –±—É–¥—å –ø–æ–ª–µ–∑–Ω—ã–º –ø–æ–º–æ—â–Ω–∏–∫–æ–º –≤ Telegram-–≥—Ä—É–ø–ø–µ."}
            ] + chat_history + [{"role": "user", "content": query}]
            response = await deepseek_client.chat.completions.create(
                model="deepseek-chat",
                messages=messages,
                max_tokens=MAX_TOKENS,
                temperature=AI_TEMPERATURE
            )
            return response.choices[0].message.content
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞ –æ—Ç AI: {e}")
            return f"–û—à–∏–±–∫–∞, —ë–±–∞–Ω–∞: {str(e)}"

# –ö–ª–∞—Å—Å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É—Ç—Ä–µ–Ω–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
class MorningMessageSender:
    def __init__(self, bot):
        self.bot = bot

    async def send_morning_message(self):
        logger.info("–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —É—Ç—Ä–µ–Ω–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è")
        try:
            cities = {
                "–ú–∏–Ω—Å–∫": "Minsk,BY", "–ñ–ª–æ–±–∏–Ω": "Zhlobin,BY", "–ì–æ–º–µ–ª—å": "Gomel,BY",
                "–ñ–∏—Ç–∫–æ–≤–∏—á–∏": "Zhitkovichi,BY", "–®—Ä–∏-–õ–∞–Ω–∫–∞": "Colombo,LK", "–ù–æ—è–±—Ä—å—Å–∫": "Noyabrsk,RU"
            }
            weather_tasks = [ApiClient.get_weather(code) for code in cities.values()]
            weather_results, (usd_byn_rate, usd_rub_rate), (btc_price_usd, wld_price_usd) = await asyncio.gather(
                asyncio.gather(*weather_tasks, return_exceptions=True),
                ApiClient.get_currency_rates(),
                ApiClient.get_crypto_prices()
            )
            weather_data = dict(zip(cities.keys(), weather_results))

            btc_price_byn = float(btc_price_usd) * float(usd_byn_rate) if btc_price_usd and usd_byn_rate else 0
            wld_price_byn = float(wld_price_usd) * float(usd_byn_rate) if wld_price_usd and usd_byn_rate else 0

            message = (
                "–†–æ–¥–Ω—ã–µ –º–æ–∏, –≤—Å–µ–º –¥–æ–±—Ä–æ–µ —É—Ç—Ä–æ –∏ —Ö–æ—Ä–æ—à–µ–≥–æ –¥–Ω—è! ‚ù§Ô∏è\n\n"
                "*–ü–æ–ª–æ–∂–Ω—è–∫ –ø–æ –ø–æ–≥–æ–¥–µ:*\n"
                + "\n".join(f"üå• *{city}*: {data}" for city, data in weather_data.items()) + "\n\n"
                "*–ü–æ–ª–æ–∂–Ω—è–∫ –ø–æ –∫—É—Ä—Å–∞–º:*\n"
                f"üíµ *USD/BYN*: {usd_byn_rate:.2f} BYN\n"
                f"üíµ *USD/RUB*: {usd_rub_rate:.2f} RUB\n"
                f"‚Çø *BTC*: ${btc_price_usd:,.2f} USD | {btc_price_byn:,.2f} BYN\n"
                f"üåç *WLD*: ${wld_price_usd:.2f} USD | {wld_price_byn:.2f} BYN"
            )
            await self.bot.send_message(chat_id=CHAT_ID, text=message, parse_mode=types.ParseMode.MARKDOWN)
            logger.info("–£—Ç—Ä–µ–Ω–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
        except aiohttp.ClientError as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
        except aiogram.exceptions.TelegramAPIError as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram: {e}")
        except ValueError as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {e}")

# –û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –±–æ—Ç–∞
class BotApp:
    def __init__(self):
        self.bot = Bot(token=TELEGRAM_TOKEN)
        self.dp = Dispatcher()
        self.scheduler = None
        self.morning_sender = None
        self.keep_alive_task = None
        self.db_pool = None
        self.bot_info = None

    async def keep_alive(self):
        while True:
            logger.info("–ë–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω")
            await asyncio.sleep(300)

    async def on_startup(self):
        logger.info(f"–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤–µ—Ä—Å–∏–∏ {CODE_VERSION}")
        self.bot_info = await self.bot.get_me()
        self.morning_sender = MorningMessageSender(self.bot)
        self.db_pool = await asyncpg.create_pool(DATABASE_URL)
        async with self.db_pool.acquire() as conn:
            await conn.execute("""
                CREATE TABLE IF NOT EXISTS chat_history (
                    chat_id BIGINT,
                    role TEXT,
                    content TEXT,
                    timestamp DOUBLE PRECISION
                )
            """)
        self.scheduler = AsyncIOScheduler(timezone=pytz.timezone('Europe/Moscow'))
        self.scheduler.add_job(self.morning_sender.send_morning_message, trigger=CronTrigger(hour=17, minute=53))
        self.scheduler.start()
        logger.info("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–ø—É—â–µ–Ω")
        self.keep_alive_task = asyncio.create_task(self.keep_alive())

    async def on_shutdown(self):
        logger.info("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞")
        if self.keep_alive_task and not self.keep_alive_task.done():
            self.keep_alive_task.cancel()
            try:
                await self.keep_alive_task
            except asyncio.CancelledError:
                pass
        if self.scheduler:
            self.scheduler.shutdown()
            logger.info("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        if self.db_pool:
            await self.db_pool.close()
            logger.info("–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å PostgreSQL –∑–∞–∫—Ä—ã—Ç–æ")
        await self.bot.session.close()
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

    async def get_chat_history(self, chat_id):
        async with self.db_pool.acquire() as conn:
            rows = await conn.fetch(
                "SELECT role, content FROM chat_history WHERE chat_id = $1 ORDER BY timestamp DESC LIMIT $2",
                chat_id, CHAT_HISTORY_LIMIT
            )
            return [{"role": row['role'], "content": row['content']} for row in reversed(rows)]

    async def save_chat_message(self, chat_id, role, content):
        async with self.db_pool.acquire() as conn:
            await conn.execute(
                "INSERT INTO chat_history (chat_id, role, content, timestamp) VALUES ($1, $2, $3, $4)",
                chat_id, role, content, datetime.now().timestamp()
            )

    async def command_start(self, message: types.Message):
        await message.reply(f"–ü—Ä–∏–≤–µ—Ç, —è –±–æ—Ç –≤–µ—Ä—Å–∏–∏ {CODE_VERSION}")

    async def command_version(self, message: types.Message):
        await message.reply(f"–í–µ—Ä—Å–∏—è –±–æ—Ç–∞: {CODE_VERSION}")

    async def command_reset(self, message: types.Message):
        chat_id = message.chat.id
        async with self.db_pool.acquire() as conn:
            await conn.execute("DELETE FROM chat_history WHERE chat_id = $1", chat_id)
        await message.reply("–ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞ —Å–±—Ä–æ—à–µ–Ω–∞, –º—É–¥–∏–ª–∞. –ù–∞—á–∏–Ω–∞–µ–º —Å —á–∏—Å—Ç–æ–≥–æ –ª–∏—Å—Ç–∞!")

    async def command_team_matches(self, message: types.Message, team_name):
        team_id = TEAM_IDS.get(team_name)
        if not team_id:
            await message.reply("–ö–æ–º–∞–Ω–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –º—É–¥–∏–ª–∞!")
            return
        data = await ApiClient.get_team_matches(team_id)
        if not data or not data.get("response"):
            await message.reply("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –º–∞—Ç—á–∞—Ö. –ü–∏–∑–¥–µ—Ü –∫–∞–∫–æ–π-—Ç–æ!")
            return
        response = f"–ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 –º–∞—Ç—á–µ–π {team_name.upper()}:\n\n"
        for fixture in data["response"]:
            fixture_id = fixture["fixture"]["id"]
            home_team = fixture["teams"]["home"]["name"]
            away_team = fixture["teams"]["away"]["name"]
            home_goals = fixture["goals"]["home"] if fixture["goals"]["home"] is not None else 0
            away_goals = fixture["goals"]["away"] if fixture["goals"]["away"] is not None else 0
            date = fixture["fixture"]["date"].split("T")[0]
            result_icon = ("üü¢" if home_goals > away_goals else "üî¥" if home_goals < away_goals else "üü°") \
                if fixture["teams"]["home"]["id"] == team_id else \
                ("üü¢" if away_goals > home_goals else "üî¥" if away_goals < home_goals else "üü°")
            events_data = await ApiClient.get_match_events(fixture_id)
            goals_str = "–ì–æ–ª—ã: "
            if events_data and events_data.get("response"):
                goal_events = [e for e in events_data["response"] if e["type"] == "Goal"]
                goals_str += ", ".join([f"{e['player']['name']} ({e['time']['elapsed']}')" for e in goal_events]) \
                    if goal_events else "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –≥–æ–ª–∞—Ö"
            else:
                goals_str += "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏–π"
            response += f"{result_icon} {date}: {home_team} {home_goals} - {away_goals} {away_team}\n{goals_str}\n\n"
        await message.reply(response)

    async def handle_message(self, message: types.Message):
        try:
            if not message.from_user or not message.text:
                return
            message_text = message.text.lower()
            bot_username = f"@{self.bot_info.username.lower()}"
            bot_id = self.bot_info.id

            logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {message.from_user.id}: {message.text}")

            if message.from_user.id == TARGET_USER_ID:
                try:
                    await self.bot.set_message_reaction(
                        chat_id=message.chat_id,
                        message_id=message.message_id,
                        reaction=[TARGET_REACTION]
                    )
                except aiogram.exceptions.TelegramAPIError as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ —Ä–µ–∞–∫—Ü–∏–∏: {e}")

            is_reply_to_bot = (message.reply_to_message and 
                             message.reply_to_message.from_user and 
                             message.reply_to_message.from_user.id == bot_id)
            is_tagged = bot_username in message_text

            if message_text in ['—Å–æ—Å–∞–ª?', 'sosal?']:
                response = RARE_RESPONSE_SOSAL if random.random() < 0.1 else random.choice(RESPONSES_SOSAL)
                await message.reply(response)
            elif message_text == '–ª–µ—Ç–∞–ª?':
                await message.reply(RESPONSE_LETAL)
            elif message_text == '—Å–∫–∞–º–∏–ª?':
                await message.reply(random.choice(RESPONSES_SCAMIL))
            elif is_tagged or is_reply_to_bot:
                query = message_text.replace(bot_username, "").strip() if is_tagged else message_text
                if not query:
                    await message.reply("–ò —Ö—É–ª–µ —Ç—ã –º–Ω–µ –ø–∏—à–µ—à—å –ø—É—Å—Ç–æ—Ç—É, –ø–µ—Ç—É—à–∞—Ä–∞?")
                    return
                chat_id = message.chat.id
                chat_history = await self.get_chat_history(chat_id)
                if is_reply_to_bot and message.reply_to_message.text:
                    chat_history.append({"role": "assistant", "content": message.reply_to_message.text})
                ai_response = await AiHandler.get_ai_response(chat_history, query)
                await self.save_chat_message(chat_id, "user", query)
                await self.save_chat_message(chat_id, "assistant", ai_response)
                await message.reply(ai_response)
        except aiogram.exceptions.TelegramAPIError as e:
            logger.error(f"–û—à–∏–±–∫–∞ Telegram API: {e}")
        except asyncpg.PostgresError as e:
            logger.error(f"–û—à–∏–±–∫–∞ PostgreSQL: {e}")
        except ValueError as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
        except Exception as e:
            logger.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

    def setup_handlers(self):
        self.dp.message.register(self.command_start, Command("start"))
        self.dp.message.register(self.command_version, Command("version"))
        self.dp.message.register(self.command_reset, Command("reset"))
        self.dp.message.register(partial(self.command_team_matches, team_name="real"), Command("real"))
        self.dp.message.register(partial(self.command_team_matches, team_name="lfc"), Command("lfc"))
        self.dp.message.register(partial(self.command_team_matches, team_name="arsenal"), Command("arsenal"))
        self.dp.message.register(self.handle_message)

    async def start(self):
        self.setup_handlers()
        await self.on_startup()
        try:
            await self.dp.start_polling(self.bot, allowed_updates=["message"])
        finally:
            await self.on_shutdown()

async def main():
    bot_app = BotApp()
    try:
        logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
        await bot_app.start()
    except (KeyboardInterrupt, SystemExit):
        logger.info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
    except Exception as e:
        logger.error(f"–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ main: {e}")

if __name__ == "__main__":
    print(f"–°—Ç–∞—Ä—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è. –í–µ—Ä—Å–∏—è: {CODE_VERSION}")
    asyncio.run(main())
